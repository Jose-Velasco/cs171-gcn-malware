# %%
from pathlib import Path
import torch
from datasets import APICallGraphDataset

# %%
# directories that samples are in are the families they belong to aka Labels
rawDataPath = Path("./AllFiles_CleanLogAPI/raw")
familyLabels = [dirEntryLabel.stem.lower().strip().strip("\n") for dirEntryLabel in rawDataPath.iterdir() if dirEntryLabel.is_dir()]
familyLabels

# %%
label_to_index = {label: index for index, label in enumerate(familyLabels)}
label_to_index

# %%
dataset = APICallGraphDataset(
    root="./AllFiles_CleanLogAPI",
    apiCallEmbeddingsFilePath="./APICallword2vec_VecSize100_skipGram.wordvectors",
    weighted=True,
    allClassLabels=label_to_index
    )

# %%
# if dataset.has_process:
# dataset._process()

# %%
print(dataset[0].edge_index)
print(dataset[0].x)
print(dataset[0].edge_attr)
print(dataset[0].y)

# %%
print(dataset[1].edge_index.t())
print(dataset[1].x)
print(dataset[1].edge_attr)
print(dataset[1].y)

# %%
print(dataset[400].edge_index.t())
print(dataset[400].x)
print(dataset[400].edge_attr)
print(dataset[400].y)

# %%
# [
#     [ 0,  0,  7,  7, 16, 16, 10, 10, 11, 11,  5,  5,  6,  6,  1,  1, 44, 44, 3,  3, 33, 33, 23, 23, 37, 37, 40, 40, 24, 24,  4,  4, 29, 29, 12, 12, 34, 34],
#     [ 0,  0,  7,  7, 16, 16, 10, 10, 11, 11,  5,  5,  6,  6,  1,  1, 44, 44, 3,  3, 33, 33, 23, 23, 37, 37, 40, 40, 24, 24,  4,  4, 29, 29, 12, 12, 34, 34]
# ]

# %%
dataset.print_summary()

# %%
dataset.num_classes

# %%
print()
print(f'Dataset: {dataset}:')
print('====================')
print(f'Number of graphs: {len(dataset)}')
print(f'Number of features: {dataset.num_features}')
print(f'Number of features per Node: {dataset.num_node_features}')
print(f'Number of edge features: {dataset.num_edge_features}')
print(f'Number of classes: {dataset.num_classes}')

data = dataset[0]  # Get the first graph object.

print()
print(data)
print('=============================================================')

# Gather some statistics about the first graph.
print(f'Number of nodes: {data.num_nodes}')
print(f'Number of edges: {data.num_edges}')
print(f'Average node degree: {data.num_edges / data.num_nodes:.2f}')
print(f'Has isolated nodes: {data.has_isolated_nodes()}')
print(f'Has self-loops: {data.has_self_loops()}')
print(f'Is undirected: {data.is_undirected()}')


# %%
print(torch.cuda.is_available())
print(torch.cuda.device_count())
print(torch.cuda.current_device())
print(torch.cuda.get_device_name(0))
print(torch.version.cuda)

