import torch
from torch.nn import Linear
from torch_geometric.nn import GCNConv, global_mean_pool
import torch.nn.functional as F

class GCN(torch.nn.Module):
    def __init__(self, numNodeFeatures: int, numClasses: int, hiddenChannels: int, weighted: bool):
        super(GCN, self).__init__()
        # torch.manual_seed(12345)
        self.weighted = weighted
        self.conv1 = GCNConv(numNodeFeatures, hiddenChannels, normalize=False, add_self_loops=False)
        # self.conv2 = GCNConv(hiddenChannels, hiddenChannels)
        self.conv2 = GCNConv(hiddenChannels, hiddenChannels, normalize=False, add_self_loops=False)
        # self.conv3 = GCNConv(hiddenChannels, numClasses, normalize=False, add_self_loops=False)
        self.conv3 = GCNConv(hiddenChannels, hiddenChannels, normalize=False, add_self_loops=False)
        self.lin = Linear(hiddenChannels, hiddenChannels)
        self.lin2 = Linear(hiddenChannels, numClasses)
    
    def forward(self, x, edgeIndex, edgeWeight, batch):
        # 1. Obtain node embeddings 
        if self.weighted:
            x = self.conv1(x=x, edge_index=edgeIndex, edge_weight=edgeWeight)
            x = F.relu(x)
            # x = F.dropout(x, training=self.training)
            x = self.conv2(x=x, edge_index=edgeIndex, edge_weight=edgeWeight)
            x = F.relu(x)
            # x = F.dropout(x, training=self.training)
            x = self.conv3(x=x, edge_index=edgeIndex, edge_weight=edgeWeight)
        else:
            x = self.conv1(x=x, edge_index=edgeIndex)
            x = F.relu(x)
            # x = F.dropout(x, training=self.training)
            x = self.conv2(x=x, edge_index=edgeIndex)
            x = F.relu(x)
            # x = F.dropout(x, training=self.training)
            x = self.conv3(x=x, edge_index=edgeIndex)

        # 2. Readout layer
        # [batch_size, hidden_channels]
        x = global_mean_pool(x, batch)

        # 3. Apply a final classifier
        x = self.lin(x)
        x = F.tanh(x)
        # x = F.dropout(x, p=0.5, training=self.training)
        x = self.lin2(x)

        return F.log_softmax(x, dim=1)
        # return F.softmax(x)
        # return x
