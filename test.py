# %%
from datasets import APICallTopologicalGraphDataset, APICallGraphDataset
from utils import generateFamilyLabels, generateLabelToIndex
from pathlib import Path
from torch_geometric.utils import to_networkx
from torch_geometric.data import Data
import networkx as nx
import torch
import matplotlib.pyplot as plt


# %%
rawDataPath = Path("./AllFiles_CleanLogAPI/raw")
familyLabels = generateFamilyLabels(rawDataPath)
labelsToIndices = generateLabelToIndex(familyLabels)

# %%
dataset1 = APICallTopologicalGraphDataset(
    root="./AllFiles_CleanLogAPI",
    processSubDir="topologicalUnweighedGraphs",
#   # topological order unweighed
    fileNameMetaInfoSuffix="Top_UW",
    apiCallEmbeddingsFilePath="./APICallword2vec_VecSize100_skipGram.wordvectors",
    allClassLabels=labelsToIndices,
)

dataset2 = APICallGraphDataset(
    root="./AllFiles_CleanLogAPI",
    processSubDir="UndirectedWeighedGraphs",
    # undirected weighted
    fileNameMetaInfoSuffix="UD_W",
    apiCallEmbeddingsFilePath="./APICallword2vec_VecSize100_skipGram.wordvectors",
    weighted=True,
    allClassLabels=labelsToIndices,
)



# %%
DATA_IDX = 0
NODE_SIZE = 350
NODE_COLOR='#30c558'
FONT_SIZE = 8

# %%
graph1 = to_networkx(dataset1[DATA_IDX])
pos1 = nx.spring_layout(graph1)

LABEL_API_CALL_MAP1 = {index: apiCall for index, apiCall in enumerate(dataset1[DATA_IDX].allNodeNames)}

plt.figure(figsize=(10, 8))
nx.draw(graph1, pos1, with_labels=True, node_size=NODE_SIZE, node_color=NODE_COLOR, font_size=FONT_SIZE, labels=LABEL_API_CALL_MAP1)

# %%
graph2: nx.Graph = to_networkx(dataset2[DATA_IDX], to_undirected=True)
pos2 = nx.fruchterman_reingold_layout(graph2)


LABEL_API_CALL_MAP2 = {index: apiCall for index, apiCall in enumerate(dataset2[DATA_IDX].allNodeNames)}

plt.figure(figsize=(10, 8))
nx.draw(graph2, pos2, with_labels=True, node_size=NODE_SIZE, node_color=NODE_COLOR, font_size=FONT_SIZE, labels=LABEL_API_CALL_MAP2)

# %%
dataset1[DATA_IDX].className
# %%
dataset2[DATA_IDX].className

# %%
