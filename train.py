# %%
import torch
from datasets import APICallGraphDataset
from pathlib import Path
from models import GCN
from torch_geometric.loader import DataLoader

# %%
# directories that samples are in are the families they belong to aka Labels
rawDataPath = Path("./AllFiles_CleanLogAPI/raw")
familyLabels = [dirEntryLabel.stem.lower().strip().strip("\n") for dirEntryLabel in rawDataPath.iterdir() if dirEntryLabel.is_dir()]
familyLabels

# %%
label_to_index = {label: index for index, label in enumerate(familyLabels)}

# %%
dataset = APICallGraphDataset(
    root="./AllFiles_CleanLogAPI",
    apiCallEmbeddingsFilePath="./APICallword2vec_VecSize100_skipGram.wordvectors",
    weighted=True,
    allClassLabels=label_to_index
)

# %%
# yTorch Geometric provides some useful utilities for working with graph datasets, e.g., we can shuffle the dataset and use the first
torch.manual_seed(12345)
dataset = dataset.shuffle()

train_dataset = dataset[:392]
test_dataset = dataset[392:]

print(f'Number of training graphs: {len(train_dataset)}')
print(f'Number of test graphs: {len(test_dataset)}')

# %%
# Mini-batching of graphs
# The length of this dimension is then equal to the number of examples grouped in a
# mini-batch and is typically referred to as the batch_size
train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=1, shuffle=False)

for step, data in enumerate(train_loader):
    print(f'Step {step + 1}:')
    print('=======')
    print(f'Number of graphs in the current batch: {data.num_graphs}')
    print(data)
    print()

# Here, we opt for a batch_size of 64, leading to 5 (randomly shuffled) mini-batches, containing all  5⋅64 + 9 =150  graphs.
# Furthermore, each Batch object is equipped with a batch vector, which maps each node to its respective graph in the batch:
# batch=[0,…,0,1,…,1,2,…]

# %%
# Training a GNN for graph classification usually follows a simple recipe:
# 1. Embed each node by performing multiple rounds of message passing
# 2. Aggregate node embeddings into a unified graph embedding (readout layer)
# 3. Train a final classifier on the graph embedding
def train(loader, device):
    model.train()
    for data in loader:  # Iterate in batches over the training dataset.
        data.to(device)
        out = model(data.x, data.edge_index, data.edge_attr, data.batch)  # Perform a single forward pass.
        loss = criterion(out, data.y)  # Compute the loss.
        loss.backward()  # Derive gradients.
        optimizer.step()  # Update parameters based on gradients.
        optimizer.zero_grad()  # Clear gradients.


# %%
def test(loader, device):
    model.eval()
    correct = 0
    for data in loader:  # Iterate in batches over the training/test dataset.
        data.to(device)    
        out = model(data.x, data.edge_index, data.edge_attr, data.batch)  
        pred = out.argmax(dim=1)  # Use the class with highest probability.
        correct += int((pred == data.y).sum())  # Check against ground-truth labels.
    return correct / len(loader.dataset)  # Derive ratio of correct predictions.


# %%
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = GCN(dataset.num_features, dataset.num_classes, 128).to(device)
# model = GCN(dataset.num_features, dataset.num_classes, 32)
# data = dataset[0].to(device)
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)
criterion = torch.nn.CrossEntropyLoss()
print(model)
# model.train()
# for epoch in range(200):  # Iterate in batches over the training dataset
#     out = model(data.x, data.edge_index, data.batch) # Perform a single forward pass
#     loss = criterion(out, data.y)  # Compute the loss
#     loss.backward() # Derive gradients
#     optimizer.step() # Update parameters based on gradients
#     optimizer.zero_grad()  # Clear gradients

# model.eval()
# pred = model(data).argmax(dim=1)
# correct = (pred[data.test_mask] == data.y[data.test_mask]).sum()
# acc = int(correct) / int(data.test_mask.sum())
# print(f'Accuracy: {acc:.4f}')

# %%
for epoch in range(1, 80):
    train(train_loader, device)
    train_acc = test(train_loader, device)
    test_acc = test(test_loader, device)
    print(f'Epoch: {epoch:03d}, Train Acc: {train_acc:.4f}, Test Acc: {test_acc:.4f}')
# %%
