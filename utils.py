from pathlib import Path
from torch_geometric.data import Dataset

def generateFamilyLabels(rawDataPath: Path) -> list[str]:
    familyLabels = [dirEntryLabel.stem.lower().strip().strip("\n") for dirEntryLabel in rawDataPath.iterdir() if dirEntryLabel.is_dir()]
    return familyLabels

def generateLabelToIndex(familyLabels: list[str]) -> dict[str, int]:
    label_to_index = {label: index for index, label in enumerate(familyLabels)}
    return label_to_index

def balanceDataSplits(unique_labels: dict[str, int], dataset: Dataset, trainPercent: float, valPercent: float):
    train_indices, val_indices, test_indices = [], [], []
    # Iterate over each class and split indices for each subset
    for labelKey in unique_labels:
        idx = 0
        label_indices = []
        labelIdx = unique_labels[labelKey]
        for data in dataset:
            if (data.y == labelIdx):
                label_indices.append(idx)
            idx += 1

        num_data = len(label_indices)
        num_train = int(trainPercent * num_data)
        num_val = int(valPercent * num_data)
        train_indices.extend(label_indices[:num_train])
        val_indices.extend(label_indices[num_train:num_train + num_val])
        test_indices.extend(label_indices[num_train + num_val:])
        remainder = num_data - (num_train + num_val)
        if remainder > 0:
            print(f"Warning: Class {labelKey} has {remainder} samples left out.")

    return train_indices, val_indices, test_indices